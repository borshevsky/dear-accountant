from enum import Enum

from party import (
    Party, AlreadyMember, MemberWastedMoneyAlready,
    PartyIsTooBoring, IncorrectMoney, NotAMember, UnknownParticipant)
from song import TEXT as song_text

from functools import wraps, partial
from inspect import signature, Parameter
import random


class Service:
    def __call__(self, *args, **kwargs):
        raise RuntimeError('Service variable should not be called')

    def __getattr__(self, item):
        raise RuntimeError('Service variable should not be called')


class InParty(Enum):
    yes = 'yes'
    no = 'no'
    doesnt_matter = 'doesnt_matter'


def make_arguments(params, cmd_args):
    arguments = {p.name: value for p, value in zip(params, cmd_args)}

    # Put all tail arguments to the last parameter if it is list
    if len(cmd_args) > len(params) and params[-1].annotation == list:
        last_param_name = params[-1].name
        tail = [arguments.pop(last_param_name)]
        tail.extend(cmd_args[len(params):])
        arguments[last_param_name] = tail

    return arguments

def command(in_party=InParty.yes):
    def decorator(f):
        params = [p for p in signature(f).parameters.values()
                  if p.kind == Parameter.POSITIONAL_OR_KEYWORD
                  and not isinstance(p.default, Service)]

        @wraps(f)
        def wrapper(*args, **kwargs):
            chat_data = kwargs.get('chat_data', {})
            cmd_args = kwargs.get('args', [])
            update = args[1]

            sink = partial(_send_message, update=update)

            if in_party == InParty.yes and 'party' not in chat_data:
                sink('üåû üåû –í–µ—á–µ—Ä–∏–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å :(')
                return

            if in_party == InParty.no and 'party' in chat_data:
                sink('üåû üåû –í–µ—á–µ—Ä–∏–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å :(')
                return

            if len(cmd_args) < len(params):
                params_strings = [('<{}>', '[{}]')[p.default != Parameter.empty].format(p.name) for p in params]
                usage = '‚õîÔ∏è Usage: {} {}'.format(f.__name__, ' '.join(params_strings))
                sink(usage)
                return

            arguments = make_arguments(params, cmd_args)

            kwargs['sink'] = sink
            if in_party == InParty.yes:
                kwargs['party'] = chat_data['party']
            f(**kwargs, **arguments)

        return wrapper
    return decorator


class PartyAlreadyStarted(Exception):
    def __init__(self, name):
        self.name = name


def _send_message(message, update, md=False):
    if md:
        update.message.reply_markdown(message, quote=False)
        return

    update.message.reply_text(message, quote=False)


@command(in_party=InParty.no)
def party(name, members: list, sink=Service(), **kwargs):
    kwargs['chat_data']['party'] = Party(name, members)
    sink('üçæ üíÉ üï∫ –í–µ—á–µ—Ä–∏–Ω–∞ {} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!'.format(name))


@command()
def add(member, sink=Service(), party=Service(), **kwargs):
    try:
        party.add(member)
        sink('‚ûï –ü–æ–Ω—è–ª –ø—Ä–∏–Ω—è–ª, {} —Ç–µ–ø–µ—Ä—å –≤ —Ç–µ–º–µ'.format(member))
    except AlreadyMember:
        sink('üëé üëé {} –µ—â–µ –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç –≤ –≤–µ—á–µ—Ä–∏–Ω–µ'.format(member))


@command()
def remove(member, sink=Service(), party=Service(), **kwargs):
    try:
        party.remove(member)
        sink('‚ûñ {} —É—Ö–æ–¥–∏—Ç –≤ –∑–∞–∫–∞—Ç'.format(member))
    except NotAMember:
        sink('üòû üòû {} –µ—â–µ –Ω–µ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–µ :('.format(member))
    except MemberWastedMoneyAlready:
        sink('üò° üò° {} —É–∂–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª—Å—è, –∫–∞–∫-—Ç–æ –Ω–µ–∫—Ä–∞—Å–∏–≤–æ –≤—ã–≥–æ–Ω—è—Ç—å'.format(member))


@command()
def reset(member, sink=Service(), party=Service(), **kwargs):
    try:
        party.reset(member)
    except NotAMember:
        sink('üòû üòû {} –µ—â–µ –Ω–µ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–µ :('.format(member))


@command()
def members(sink=Service(), party=Service(), **kwargs):
    m = party.members
    if not m:
        sink('üçÜ –í–µ—á–µ—Ä–∏–Ω–∞ –ø—É—Å—Ç—É–µ—Ç...')
        return

    sink('üï¥üèº üíÉüèº üï∫üèº üö∂üèº‚Äç‚ôÄÔ∏è üö∂üèº üèÉüèº‚Äç‚ôÄÔ∏è üèÉüèº –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–µ—á–µ—Ä–∏–Ω—ã {}:\n{}'.format(
        party.name, '\n'.join(m)))


@command()
def money(sink=Service(), party=Service(), **kwargs):
    money = party.money()
    if not money:
        sink('üçÜ –í–µ—á–µ—Ä–∏–Ω–∞ –ø—É—Å—Ç—É–µ—Ç...')
        return

    messages = ['{} –ø–æ—Ç—Ä–∞—Ç–∏–ª {}'.format(member, money) for member, m in money.items()]
    sink('–¢–µ–∫—É—â–∏–µ —Ç—Ä–∞—Ç—ã:\n{}'.format('\n'.join(messages)))


@command()
def waste(member, amount, sink=Service(), party=Service(), **kwargs):
    try:
        party.waste(member, amount)
        sink('üí∞ üíµ üí¥ –ü–æ–Ω—è–ª, —Å–µ–Ω–∫—å—é, {} –ø–æ—Ç—Ä–∞—Ç–∏–ª {} —Ä—É–±–ª–µ–π'.format(member, amount))
    except IncorrectMoney:
        sink('üôà üôâ üí© üôä –ß—Ç–æ –∑–∞ –¥–∏—á—å? {}'.format(amount))
    except UnknownParticipant:
        sink('{} –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç –≤ –≤–µ—á–µ—Ä–∏–Ω–µ'.format(member))


@command()
def payoff(party=Service(), sink=Service(), **kwargs):
    try:
        transactions = party.payoff()
        message = '\n'.join(['{} => {}: {}'.format(f, t, a) for f, t, a in transactions])
        sink(message)
    except PartyIsTooBoring:
        sink('üêí –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ç—É—Ç –æ—Å–æ–±–æ –Ω–µ—á–µ–≥–æ...')


@command()
def finish(party=Service(), sink=Service(), **kwargs):
    party_name = party.name
    del kwargs['chat_data']['party']
    sink('–í–µ—á–µ—Ä–∏–Ω–∞ {} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! üî•üî•üî•'.format(party_name))


@command(in_party=InParty.doesnt_matter)
def help(sink=Service(), **kwargs):
    text = """ ***–ö–æ–º–∞–Ω–¥—ã***
          */party* <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–ª—é–¥–∏>: –ù–∞—á–∞—Ç—å –≤–µ—á–µ—Ä–∏–Ω—É. ex: /party —Ç—É—Å—É–µ–º –ø–µ–ª—å—à –ª—É—á –∂–∞–Ω–Ω–∞
          */add* <–∏–º—è>: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω—É. ex: /add –≤–ª–∞–¥–æ—Å
          */remove* <–∏–º—è>: –ö—Ç–æ –ø–æ–∑–≤–∞–ª –µ–≥–æ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω—É? ex: /remove –ø–µ–ª—å—à
          */waste* <–∏–º—è> <—Å–∫–æ–ª—å–∫–æ>: –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–∞—Ç—É. ex: /waste –ª—É—á 1–∫
          */members*: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
          */money*: –¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã.
          */payoff*: –†–∞—Å—Å—á–µ—Ç.
          */finish*: –ö–æ–Ω–µ—Ü –≤–µ—á–µ—Ä–∏–Ω—ã.
          
          */song*: –°–ø–æ–π –ø–ª–∏–∑.
    """
    sink(text, md=True)


@command(in_party=InParty.doesnt_matter)
def song(sink=Service(), **kwargs):
    lines_count = len(song_text)
    first_line = random.randint(0, int(lines_count / 2) - 1)
    line = first_line * 2

    message = '{}...'.format('\n'.join(song_text[line:line+2]))
    sink(message)
